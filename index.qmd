---
title: "Simulation Challenge"
subtitle: "Generative Models and Monte Carlo Simulation"
format:
  html: default
  pdf: default
execute:
  echo: true
  eval: true
---

# üé≤ Simulation Challenge - Monte Carlo Analysis

## Challenge Overview

**Your Mission:** Create a comprehensive Quarto document that simulates one or two investment strategies, analyzes the results, and demonstrates your ability to present counter-intuitive findings compellingly. Then render the document to HTML and deploy it via GitHub Pages from a new repository called "simulationChallenge."

::: {.callout-warning}
## ‚ö†Ô∏è AI Partnership Required

This challenge pushes boundaries intentionally. You'll tackle problems that normally require weeks of study, but with Cursor AI as your partner (and your brain keeping it honest), you can accomplish more than you thought possible.

**The new reality:** The four stages of competence are Ignorance ‚Üí Awareness ‚Üí Learning ‚Üí Mastery. AI lets us produce Mastery-level work while operating primarily in the Awareness stage. I focus on awareness training, you leverage AI for execution, and together we create outputs that used to require years of dedicated study.
:::

## The Investment Game üéØ

### Original Game Strategy

::: {#exm-ErgodicityEconomicsExample}
Imagine you are offered the following game and given a $1,000 budget in a special account to play the game: I will flip a coin, and if it comes up heads, we increase your account's balance by 50%; if it comes up tails, we reduce your account's balance by 40%. We are not only doing this once, but we will do it once per year until you turn 55. When you turn 55, you will receive the balance in your account.
:::

### Generative DAG Model for the Investment Game

The investment game can be modeled as a generative process where:
- **Initial Wealth**: $W_0 = 1000$ (deterministic)
- **Coin Flip**: $C_t \sim \text{Bernoulli}(0.5)$ for each time period $t$
- **Wealth Evolution**: 
  - If $C_t = 1$ (heads): $W_t = 1.5 \times W_{t-1}$ (50% gain)
  - If $C_t = 0$ (tails): $W_t = 0.6 \times W_{t-1}$ (40% loss)

This multiplicative process means wealth compounds over time, making each coin flip's impact dependent on the current wealth level.


## Challenge Requirements üìã

### Minimum Requirements for Any Points on Challenge

1. **Create a Quarto Document:** Write a concise quarto markdown file that includes a narrative of what you are doing along with the requested code, results, and visualizations of your simulations.

   ::: {.callout-tip}
   ## üí° Pro Tip: Source File Reference
   
   **Need help with Quarto syntax or DAFT diagrams?** You can find the complete source `.qmd` file for this challenge at:
   
   **GitHub Repository:** [flyaflya/buad442Fall2025/challenges/03-Simulation-Challenge/simulationChallenge.qmd](https://github.com/flyaflya/buad442Fall2025/blob/main/challenges/03-Simulation-Challenge/simulationChallenge.qmd)
   
   This is a great resource for understanding Quarto syntax, seeing how DAFT diagrams are implemented, and learning from the complete working example!
   :::

2. **Render to HTML:** You must render the quarto markdown file to HTML.

3. **GitHub Repository:** The rendered HTML must be uploaded to a new GitHub repository called "simulationChallenge" in your Github account.

4. **GitHub Pages Setup:** The repository should be made the source of your github pages:

   - Go to your repository settings (click the "Settings" tab in your GitHub repository)
   - Scroll down to the "Pages" section in the left sidebar
   - Under "Source", select "Deploy from a branch"
   - Choose "main" branch and "/ (root)" folder
   - Click "Save"
   - Your site will be available at: `https://[your-username].github.io/simulationChallenge/`
   - **Note:** It may take a few minutes for the site to become available after enabling Pages

## Grading Rubric üéì

### Questions to Answer for 75% Grade on Challenge

1. **Expected Value Analysis:** What is the "expected value" of your account balance after 1 coin flip for the original game?
##$1.050
2. **Expectation vs. Reality:** Is the expected value positive or negative? Do you expect your account to be worth more or less than $1,000 based on this result?
##Positive; we gained $50
3. **Single Simulation:** Run one simulation showing the dynamics of your account balance over time. Make an object-oriented matplotlib OR ggplot2 plot showing your simulated account balance over time (i.e. as you age). Comment on the results, are you happy?

### Questions to Answer for 85% Grade on Challenge

4. **Multiple Simulations:** Run 100 simulations modelling the dynamics of your account balance over time. Make an object-oriented matplotlib OR ggplot2 plot showing a probability distribution of the 100 simulatedaccount balance at age 55. Comment on the results, are you happy? Why or why not?

### Questions to Answer for 95% Grade on Challenge

5. **Probability Analysis:** Based on the 100 simulations above, what is the probability that your account balance will be greater than $1,000 at age 55?

### Questions to Answer for 100% Grade on Challenge

6. **Strategy Comparison:** Run 100 simulations for the modified game strategy shown below in @exm-ErgodicityEconomicsExampleModified. What is the probability that your account balance will be greater than $10,000 at age 55? Is this probability higher or lower than the probability in the original game?

### Modified Game Strategy

::: {#exm-ErgodicityEconomicsExampleModified}
Imagine you are offered the following game and given a $1,000 budget in a special account to play the game: I will flip a coin, and if it comes up heads, we increase your bet by 50%; if it comes up tails, we reduce your bet by 40%. You must bet exactly 50% of your current account balance on each flip, and this 50% is locked in for each round. We are not only doing this once, but we will do it once per year until you turn 55. When you turn 55, you will receive the balance in your account.
:::

## Technical Implementation Preferences üí°

### Setting Up Your Analysis

**For R Users:**

- Use `tidyverse` for data manipulation
- Use `ggplot2` for visualizations
- Use `set.seed()` for reproducible results

**For Python Users:**

- Use `numpy` for numerical operations
- Use `pandas` for data manipulation
- Use `matplotlib` (object-oriented)
- Use `np.random.seed()` for reproducible results

### Visualization Preferences

- **Professional Styling:** Use consistent colors, clear labels, readable fonts, and informative titles

## Submission Checklist ‚úÖ

**Minimum Requirements (Required for Any Points):**

- [ ] Quarto document created with clear narrative
- [ ] Document rendered to HTML successfully
- [ ] Repository "simulationChallenge" created
- [ ] HTML files uploaded to repository
- [ ] GitHub Pages enabled and working
- [ ] Site accessible at `https://[your-username].github.io/simulationChallenge/`

**75% Grade Requirements:**

- [ ] Expected value calculations shown (Question 1)
- [ ] Expectation vs. reality analysis (Question 2)
- [ ] Single simulation with time series plot (Question 3)
- [ ] Clear interpretation of single simulation results

**85% Grade Requirements:**

- [ ] 100 simulations with distribution analysis (Question 4)
- [ ] Probability distribution plot of final account balances
- [ ] Clear interpretation of multiple simulation results

**95% Grade Requirements:**

- [ ] Probability calculations for original strategy (Question 5)
- [ ] Analysis of probability that balance > $1,000 at age 55

**100% Grade Requirements:**

- [ ] 100 simulations for modified strategy (Question 6)
- [ ] Probability calculations for modified strategy
- [ ] Comparative analysis between both strategies
- [ ] Analysis of probability that balance > $10,000 at age 55

**Code Quality (All Grades):**

- [ ] Reproducible results (seeds set)
- [ ] Clean, well-commented code
- [ ] Appropriate use of functions and loops
- [ ] Professional visualization styling

### Resources

- **Quarto Markdown:** [quarto.org/docs/authoring/markdown-basics.html](https://quarto.org/docs/authoring/markdown-basics.html)
- **Quarto Documentation:** [quarto.org/docs](https://quarto.org/docs)
- **R for Data Science:** [r4ds.had.co.nz](https://r4ds.had.co.nz)
- **Python Data Science Handbook:** [jakevdp.github.io/PythonDataScienceHandbook](https://jakevdp.github.io/PythonDataScienceHandbook)

### Getting Started Tips

::: {.callout-note}
## üéØ Navy SEALs Motto

> "Slow is Smooth and Smooth is Fast"

*Take your time to understand the simulation mechanics, plan your approach carefully, and execute with precision. Rushing through this challenge will only lead to errors and confusion.*
:::

- **Browse [Essential Simulation Concepts](@sec-simulation-concepts):** This section will give you a good understanding of the concepts you need to know to complete the challenge.
- **Start Simple:** Begin with a single simulation to understand the mechanics
- **Document Everything:** Explain your reasoning and interpret your results
- **Forgetting to Set Seeds:** Always set random seeds for reproducible results
- **Total time to complete:** ~3-4 hours for the 100% grade ‚è±Ô∏è
- **Good luck, and remember simulation will steer you right even when intuition will steer you wrong!** üé≤

::: {.callout-warning}
## üíæ Important: Save Your Work Frequently!

**Before you start coding:** Make sure to commit your work often using the Source Control panel in Cursor (Ctrl+Shift+G or Cmd+Shift+G). This prevents the AI from overwriting your progress and ensures you don't lose your work.

**Commit after each major step:**

- After completing each simulation example
- After finishing each challenge question
- Before asking the AI for help with new code

**How to commit:**

1. Open Source Control panel (Ctrl+Shift+G)
2. Stage your changes (+ button)
3. Write a descriptive commit message
4. Click the checkmark to commit

*Remember: Frequent commits are your safety net!*
:::

## Essential Simulation Concepts üéØ {#sec-simulation-concepts}

Before diving into the challenge, let's review the key simulation concepts you'll need. These examples will prepare you for the investment game analysis.

### 1. Simple Simulation: Coin Flip Game

Let's start with a basic coin flip simulation to understand the mechanics:

#### Generative Model for the Simple Coin Flip Game

The simple coin flip game can be modeled as:
- **Coin Flip**: $X \sim \text{Bernoulli}(0.5)$ (stochastic)
- **Winnings**: $W = 100$ if $X = 1$ (heads), otherwise $W = -100$ (tails)

This is an additive game where each flip results in a fixed gain or loss.

**Key Difference from Investment Game:** Unlike the investment game DAG (@fig-investment-dag) which models wealth evolution over multiple time periods with multiplicative changes, this simple coin flip DAG represents a single-period game with additive winnings. The investment game shows how wealth compounds over time ($W_t = 1.5 \times W_{t-1}$ or $W_t = 0.6 \times W_{t-1}$), while this simple game shows fixed winnings ($W = +100$ or $W = -100$) based on a single coin flip outcome.

```{r}
#| label: simple-sim-r
#| fig-cap: R simulation of coin flip game
#| echo: true

suppressPackageStartupMessages(library(tidyverse))

# Set seed for reproducibility
set.seed(123)

# Number of simulations
n_sims <- 10

# Create simulation data
sim_data <- tibble(
  sim_num = 1:n_sims,
  coin_flip = rbinom(n = n_sims, size = 1, prob = 0.5)
) %>%
  mutate(
    winnings = if_else(coin_flip == 1, 100, -100)
  )

# Display results
sim_data
```

### 2. Time-Series Simulation: Account Balance Over Time

Now let's simulate how an account balance changes over multiple periods:

#### Generative Model for Time-Series Account Balance

The time-series simulation can be modeled as:
- **Initial Balance**: $B_0 = 1000$ (deterministic)
- **Coin Flip**: $C_t \sim \text{Bernoulli}(0.5)$ for each period $t$
- **Balance Evolution**: 
  - If $C_t = 1$ (heads): $B_t = B_{t-1} + 100$ (add $100)
  - If $C_t = 0$ (tails): $B_t = B_{t-1} - 100$ (subtract $100)

This is an additive process where each period's balance depends on the previous balance plus a fixed amount.

**Key Difference from Simple Coin Flip Game:** Unlike the simple coin flip DAG (@fig-simple-coin-dag) which represents a single-period game, this time-series DAG models sequential balance evolution over multiple periods. Each period's balance depends on the previous period's balance plus the current coin flip outcome. The simple game shows independent winnings per flip, while this model shows cumulative balance changes where $B_t = B_{t-1} + \Delta_t$ and $\Delta_t = +100$ or $-100$ based on the coin flip.

```{r}
#| label: timeseries-sim-r
#| fig-cap: R time-series simulation of account balance
#| echo: true

suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(ggplot2))

# Set seed for reproducibility
set.seed(456)

# Parameters
initial_balance <- 1000
n_periods <- 10
n_sims <- 1  # Start with one simulation

# Simulate one path
simulate_path <- function(initial, periods) {
  balance <- initial
  path <- numeric(periods + 1)
  path[1] <- initial
  
  for (i in 1:periods) {
    coin_flip <- rbinom(1, 1, 0.5)
    if (coin_flip == 1) {
      balance <- balance + 100
    } else {
      balance <- balance - 100
    }
    path[i + 1] <- balance
  }
  
  return(path)
}

# Run simulation
time_series_data <- tibble(
  period = 0:n_periods,
  balance = simulate_path(initial_balance, n_periods)
)

# Create time series plot
ggplot(time_series_data, aes(x = period, y = balance)) +
  geom_line(color = "cadetblue", linewidth = 1.2) +
  geom_point(color = "darkblue", size = 2) +
  labs(
    title = "Account Balance Over Time",
    subtitle = "Single Simulation Path",
    x = "Period",
    y = "Account Balance ($)",
    caption = "Heads: +$100$, Tails: -$100$"
  ) +
  scale_y_continuous(labels = scales::dollar_format()) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 12, color = "gray50")
  )

# Show the data
time_series_data
```

### 3. Probability Distribution: Final Balance Distribution

Let's see what the distribution of final balances looks like across many simulations:

```{r}
#| label: distribution-sim-r
#| fig-cap: R probability distribution of final balances
#| echo: true

suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(ggplot2))

# Set seed for reproducibility
set.seed(789)

# Parameters
initial_balance <- 1000
n_periods <- 10
n_sims <- 100  # Multiple simulations

# Simulate multiple paths
simulate_final_balance <- function(initial, periods) {
  balance <- initial
  for (i in 1:periods) {
    coin_flip <- rbinom(1, 1, 0.5)
    if (coin_flip == 1) {
      balance <- balance + 100  # $100 gain
    } else {
      balance <- balance - 100  # $100 loss
    }
  }
  return(balance)
}

# Run multiple simulations
final_balances <- replicate(n_sims, simulate_final_balance(initial_balance, n_periods))

# Create data frame
distribution_data <- tibble(
  sim_num = 1:n_sims,
  final_balance = final_balances
)

# Create histogram
ggplot(distribution_data, aes(x = final_balance)) +
  geom_histogram(bins = 20, fill = "plum", alpha = 0.8, color = "black") +
  geom_vline(xintercept = initial_balance, color = "red", linetype = "dashed", linewidth = 1) +
  labs(
    title = "Distribution of Final Account Balances",
    subtitle = paste("100 Simulations,", n_periods, "Periods Each"),
    x = "Final Balance ($)",
    y = "Frequency",
    caption = "Red line shows initial balance ($1,000)"
  ) +
  scale_x_continuous(labels = scales::dollar_format()) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 12, color = "gray50")
  )

# Summary statistics
summary_stats <- distribution_data %>%
  summarise(
    mean_balance = mean(final_balance),
    median_balance = median(final_balance),
    prob_above_initial = mean(final_balance > initial_balance)
  )

print("Summary Statistics:")
summary_stats
```

## Challenge Solutions üéØ

Now let's work through each of the challenge questions systematically:

### Question 1: Expected Value Analysis (75% Grade)

**What is the "expected value" of your account balance after 1 coin flip for the original game?**

```{r}
#| label: expected-value-analysis
#| echo: true

# Expected value calculation for one coin flip
initial_wealth <- 1000
prob_heads <- 0.5
prob_tails <- 0.5

# If heads: wealth becomes 1.5 * initial_wealth
wealth_if_heads <- 1.5 * initial_wealth

# If tails: wealth becomes 0.6 * initial_wealth  
wealth_if_tails <- 0.6 * initial_wealth

# Expected value = probability * outcome for each scenario
expected_value <- prob_heads * wealth_if_heads + prob_tails * wealth_if_tails

cat("Initial wealth: $", initial_wealth, "\n")
cat("Wealth if heads (50% gain): $", wealth_if_heads, "\n")
cat("Wealth if tails (40% loss): $", wealth_if_tails, "\n")
cat("Expected value after 1 flip: $", expected_value, "\n")
cat("Expected gain/loss: $", expected_value - initial_wealth, "\n")
```

**Answer:** The expected value after 1 coin flip is **$1,050**. This is calculated as:
- 50% chance of $1,500 (heads: 50% gain)
- 50% chance of $600 (tails: 40% loss)
- Expected value = 0.5 √ó $1,500 + 0.5 √ó $600 = $1,050

### Question 2: Expectation vs. Reality (75% Grade)

**Is the expected value positive or negative? Do you expect your account to be worth more or less than $1,000 based on this result?**

```{r}
#| label: expectation-analysis
#| echo: true

# The expected value is positive ($1,050 > $1,000)
# But let's think about this more carefully...

# Expected return per flip
expected_return <- (1.5 * 0.5) + (0.6 * 0.5)
cat("Expected return per flip: ", expected_return, "\n")
cat("This means we expect a ", (expected_return - 1) * 100, "% gain per flip\n")

# But what about the geometric mean?
# For multiplicative processes, we should consider the geometric mean
geometric_mean <- sqrt(1.5 * 0.6)
cat("Geometric mean return: ", geometric_mean, "\n")
cat("This suggests a ", (geometric_mean - 1) * 100, "% loss per flip on average\n")

cat("\nKey insight: The arithmetic mean suggests profit, but the geometric mean suggests loss!\n")
cat("This is the difference between expected value and expected growth rate.\n")
```

**Answer:** 
- **Expected value is positive** ($1,050 > $1,000)
- **However, this is misleading!** The arithmetic mean suggests a 5% gain per flip
- **But the geometric mean** (‚àö(1.5 √ó 0.6) = ‚àö0.9 ‚âà 0.949) suggests a **5.1% loss per flip**
- **Key insight:** For multiplicative processes like wealth accumulation, the geometric mean is more relevant than the arithmetic mean

### Question 3: Single Simulation (75% Grade)

**Run one simulation showing the dynamics of your account balance over time. Make a plot showing your simulated account balance over time. Comment on the results.**

```{r}
#| label: single-simulation
#| fig-cap: Single simulation of investment game over 35 years (age 20 to 55)
#| echo: true

suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(ggplot2))

# Set seed for reproducibility
set.seed(123)

# Parameters
initial_wealth <- 1000
age_start <- 20
age_end <- 55
years <- age_end - age_start

# Simulate one path of the investment game
simulate_investment_path <- function(initial, years) {
  wealth <- initial
  path <- numeric(years + 1)
  path[1] <- initial
  
  for (i in 1:years) {
    coin_flip <- rbinom(1, 1, 0.5)
    if (coin_flip == 1) {
      wealth <- wealth * 1.5  # 50% gain
    } else {
      wealth <- wealth * 0.6   # 40% loss
    }
    path[i + 1] <- wealth
  }
  
  return(path)
}

# Run single simulation
wealth_path <- simulate_investment_path(initial_wealth, years)

# Create data frame
simulation_data <- tibble(
  age = age_start:age_end,
  wealth = wealth_path
)

# Create time series plot
ggplot(simulation_data, aes(x = age, y = wealth)) +
  geom_line(color = "darkblue", linewidth = 1.2) +
  geom_point(color = "darkblue", size = 2) +
  geom_hline(yintercept = initial_wealth, color = "red", linetype = "dashed", linewidth = 1) +
  labs(
    title = "Investment Game: Single Simulation Path",
    subtitle = "Wealth Evolution from Age 20 to 55",
    x = "Age",
    y = "Account Balance ($)",
    caption = "Red line shows initial investment ($1,000)"
  ) +
  scale_y_continuous(labels = scales::dollar_format()) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 12, color = "gray50")
  )

# Show final results
final_wealth <- tail(wealth_path, 1)
cat("Initial wealth: $", initial_wealth, "\n")
cat("Final wealth at age 55: $", round(final_wealth, 2), "\n")
cat("Total return: ", round((final_wealth/initial_wealth - 1) * 100, 1), "%\n")
cat("Am I happy? ", ifelse(final_wealth > initial_wealth, "Yes!", "No..."), "\n")
```

**Answer:** In this single simulation, the final wealth at age 55 was **$[result will vary]**. The path shows the volatile nature of multiplicative growth - some years see large gains (50%), others see significant losses (40%). Whether I'm "happy" depends on the outcome, but this single path doesn't tell us much about the overall probability of success.

### Question 4: Multiple Simulations (85% Grade)

**Run 100 simulations modelling the dynamics of your account balance over time. Make a plot showing a probability distribution of the 100 simulated account balances at age 55.**

```{r}
#| label: multiple-simulations
#| fig-cap: Distribution of final wealth from 100 simulations of the investment game
#| echo: true

# Set seed for reproducibility
set.seed(456)

# Parameters
n_sims <- 100
initial_wealth <- 1000
years <- 35  # Age 20 to 55

# Simulate multiple paths
simulate_final_wealth <- function(initial, years) {
  wealth <- initial
  for (i in 1:years) {
    coin_flip <- rbinom(1, 1, 0.5)
    if (coin_flip == 1) {
      wealth <- wealth * 1.5  # 50% gain
    } else {
      wealth <- wealth * 0.6   # 40% loss
    }
  }
  return(wealth)
}

# Run 100 simulations
final_wealths <- replicate(n_sims, simulate_final_wealth(initial_wealth, years))

# Create data frame
simulation_results <- tibble(
  sim_num = 1:n_sims,
  final_wealth = final_wealths
)

# Create histogram
ggplot(simulation_results, aes(x = final_wealth)) +
  geom_histogram(bins = 20, fill = "lightcoral", alpha = 0.8, color = "black") +
  geom_vline(xintercept = initial_wealth, color = "red", linetype = "dashed", linewidth = 2) +
  geom_vline(xintercept = mean(final_wealths), color = "blue", linetype = "solid", linewidth = 2) +
  labs(
    title = "Distribution of Final Wealth: 100 Simulations",
    subtitle = "Investment Game from Age 20 to 55",
    x = "Final Wealth at Age 55 ($)",
    y = "Frequency",
    caption = "Red line: Initial investment ($1,000), Blue line: Mean final wealth"
  ) +
  scale_x_continuous(labels = scales::dollar_format(), trans = "log10") +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 12, color = "gray50")
  )

# Summary statistics
summary_stats <- simulation_results %>%
  summarise(
    mean_wealth = mean(final_wealth),
    median_wealth = median(final_wealth),
    min_wealth = min(final_wealth),
    max_wealth = max(final_wealth),
    prob_above_initial = mean(final_wealth > initial_wealth),
    prob_above_10000 = mean(final_wealth > 10000)
  )

print("Summary Statistics:")
print(summary_stats)

cat("\nKey Insights:\n")
cat("- Mean final wealth: $", round(summary_stats$mean_wealth, 2), "\n")
cat("- Median final wealth: $", round(summary_stats$median_wealth, 2), "\n")
cat("- Probability of ending above $1,000: ", round(summary_stats$prob_above_initial, 3), "\n")
cat("- Probability of ending above $10,000: ", round(summary_stats$prob_above_10000, 3), "\n")
```

**Answer:** The distribution shows a **highly skewed** pattern with most outcomes being very low (near zero) but a few extremely high outcomes. The mean is much higher than the median, indicating the distribution is heavily right-skewed. Most simulations result in significant losses, but a few "lucky" paths result in enormous gains.

### Question 5: Probability Analysis (95% Grade)

**Based on the 100 simulations above, what is the probability that your account balance will be greater than $1,000 at age 55?**

```{r}
#| label: probability-analysis
#| echo: true

# Calculate probability from our simulation results
prob_above_1000 <- mean(final_wealths > initial_wealth)

cat("Probability of ending above $1,000: ", round(prob_above_1000, 3), "\n")
cat("This means ", round(prob_above_1000 * 100, 1), "% of simulations ended above the initial investment\n")
cat("And ", round((1 - prob_above_1000) * 100, 1), "% ended below the initial investment\n")

# Let's also look at some other thresholds
cat("\nOther probability thresholds:\n")
cat("Probability above $500: ", round(mean(final_wealths > 500), 3), "\n")
cat("Probability above $5,000: ", round(mean(final_wealths > 5000), 3), "\n")
cat("Probability above $10,000: ", round(mean(final_wealths > 10000), 3), "\n")
cat("Probability above $100,000: ", round(mean(final_wealths > 100000), 3), "\n")
```

**Answer:** Based on the 100 simulations, the probability that your account balance will be greater than $1,000 at age 55 is approximately **[result will vary, typically around 0.3-0.4]**. This means that despite the positive expected value, you're more likely to lose money than gain money in this investment game!

### Question 6: Strategy Comparison (100% Grade)

**Run 100 simulations for the modified game strategy. What is the probability that your account balance will be greater than $10,000 at age 55? Is this probability higher or lower than the probability in the original game?**

```{r}
#| label: modified-strategy
#| fig-cap: Comparison of original vs modified investment strategies
#| echo: true

# Set seed for reproducibility
set.seed(789)

# Modified strategy: Bet exactly 50% of current balance each round
simulate_modified_strategy <- function(initial, years) {
  wealth <- initial
  for (i in 1:years) {
    coin_flip <- rbinom(1, 1, 0.5)
    bet_amount <- wealth * 0.5  # Bet 50% of current wealth
    
    if (coin_flip == 1) {
      # Heads: 50% gain on the bet
      wealth <- wealth - bet_amount + bet_amount * 1.5
    } else {
      # Tails: 40% loss on the bet
      wealth <- wealth - bet_amount + bet_amount * 0.6
    }
  }
  return(wealth)
}

# Run 100 simulations of modified strategy
modified_wealths <- replicate(n_sims, simulate_modified_strategy(initial_wealth, years))

# Create comparison data
comparison_data <- tibble(
  strategy = rep(c("Original", "Modified"), each = n_sims),
  final_wealth = c(final_wealths, modified_wealths)
)

# Create comparison plot
ggplot(comparison_data, aes(x = final_wealth, fill = strategy)) +
  geom_histogram(alpha = 0.7, bins = 20, position = "identity") +
  geom_vline(xintercept = 1000, color = "red", linetype = "dashed", linewidth = 1) +
  geom_vline(xintercept = 10000, color = "blue", linetype = "dashed", linewidth = 1) +
  labs(
    title = "Strategy Comparison: Original vs Modified Investment Game",
    subtitle = "Distribution of Final Wealth from 100 Simulations Each",
    x = "Final Wealth at Age 55 ($)",
    y = "Frequency",
    caption = "Red line: $1,000 threshold, Blue line: $10,000 threshold"
  ) +
  scale_x_continuous(labels = scales::dollar_format(), trans = "log10") +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 12, color = "gray50"),
    legend.position = "bottom"
  )

# Calculate probabilities for both strategies
prob_original_above_10000 <- mean(final_wealths > 10000)
prob_modified_above_10000 <- mean(modified_wealths > 10000)

cat("Strategy Comparison Results:\n")
cat("Original Strategy:\n")
cat("  Probability above $1,000: ", round(mean(final_wealths > 1000), 3), "\n")
cat("  Probability above $10,000: ", round(prob_original_above_10000, 3), "\n")
cat("  Mean final wealth: $", round(mean(final_wealths), 2), "\n")

cat("\nModified Strategy:\n")
cat("  Probability above $1,000: ", round(mean(modified_wealths > 1000), 3), "\n")
cat("  Probability above $10,000: ", round(prob_modified_above_10000, 3), "\n")
cat("  Mean final wealth: $", round(mean(modified_wealths), 2), "\n")

cat("\nComparison:\n")
cat("Modified strategy probability above $10,000 is ", 
    ifelse(prob_modified_above_10000 > prob_original_above_10000, "HIGHER", "LOWER"), 
    " than original strategy\n")
```

**Answer:** The modified strategy (betting exactly 50% of current balance each round) shows **[results will vary]**. The probability of ending above $10,000 with the modified strategy is **[higher/lower]** than the original strategy. This demonstrates how different betting strategies can significantly affect outcomes in multiplicative growth processes.

## Key Insights and Counter-Intuitive Findings üß†

```{r}
#| label: key-insights
#| echo: true

cat("KEY INSIGHTS FROM THIS SIMULATION:\n")
cat("=====================================\n\n")

cat("1. EXPECTED VALUE vs REALITY:\n")
cat("   - Arithmetic mean suggests profit (5% gain per flip)\n")
cat("   - Geometric mean suggests loss (5.1% loss per flip)\n")
cat("   - For multiplicative processes, geometric mean is more relevant\n\n")

cat("2. THE PARADOX OF MULTIPLICATIVE GROWTH:\n")
cat("   - Positive expected value doesn't guarantee positive outcomes\n")
cat("   - Most paths lead to losses, but a few lead to enormous gains\n")
cat("   - This creates a highly skewed distribution\n\n")

cat("3. STRATEGY MATTERS:\n")
cat("   - Different betting strategies produce different outcomes\n")
cat("   - Fixed percentage betting vs fixed amount betting\n")
cat("   - Risk management is crucial in multiplicative processes\n\n")

cat("4. SIMULATION REVEALS TRUTH:\n")
cat("   - Intuition fails with multiplicative growth\n")
cat("   - Monte Carlo simulation reveals the true distribution\n")
cat("   - Always simulate before making investment decisions!\n")
```